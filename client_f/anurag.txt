#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <string.h>

#include <dirent.h>

#define PORT 8080


char* give_me_files_list(){
    DIR *dir;
    struct dirent *dp;
    char * file_name = " ";
    dir = opendir(".");
    while ((dp=readdir(dir)) != NULL) {
        if ( !strcmp(dp->d_name, ".") || !strcmp(dp->d_name, "..") )
        {
            // filter out the . and ..
        } 
        else {
            char * new_str ;
            if((new_str = malloc(strlen(file_name)+strlen(dp->d_name)+4)) != NULL){
                new_str[0] = '\0';   // ensures the memory is an empty string
                strcat(new_str,file_name);
                strcat(new_str,"\n");
                strcat(new_str,dp->d_name);
            }
            file_name = new_str;
        }
    }
    closedir(dir);
    return file_name;
}

char* splitcommands(char str[1024])
{
    char *dimlem = " \n";
    char *dimlem1 = ";";
    char* anotherPointer;
    char* anotherPointer1;
    int looper1=0;
    char* token;
    char* token1;
    token1 = strtok_r(str,dimlem1,&anotherPointer1);
    while(token1!=NULL)
    {
        char* argumentList[50];
        int looper=0;
        token = strtok_r(token1,dimlem,&anotherPointer);
        while(token!=NULL)
        {
            argumentList[looper++]=token;
            token = strtok_r(NULL,dimlem,&anotherPointer);
        }       
        token1 = strtok_r(NULL,dimlem1,&anotherPointer1);
        //executeInbuild(argumentList,looper);
        if(looper >= 3){
            return "Multiple Files Requests not entertained.\n";
        }
        else{
            return argumentList[1];
        }
        //printf("%s\n",argumentList[1]);
    }
}

int main(int argc, char const *argv[])
{
    int server_fd, new_socket, valread;
    struct sockaddr_in address;  // sockaddr_in - references elements of the socket address. "in" for internet
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    char *hello = "Hello from server";
    char *fileslist;

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)  // creates socket, SOCK_STREAM is for TCP. SOCK_DGRAM for UDP
    {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // This is to lose the pesky "Address already in use" error message
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                                                  &opt, sizeof(opt))) // SOL_SOCKET is the socket layer itself
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;  // Address family. For IPv6, it's AF_INET6. 29 others exist like AF_UNIX etc.
    address.sin_addr.s_addr = INADDR_ANY;  // Accept connections from any IP address - listens from all interfaces.
    address.sin_port = htons( PORT );    // Server port to open. Htons converts to Big Endian - Left to Right. RTL is Little Endian

    // Forcefully attaching socket to the port 8080
    if (bind(server_fd, (struct sockaddr *)&address,
                                 sizeof(address))<0)
    {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Port bind is done. You want to wait for incoming connections and handle them in some way.
    // The process is two step: first you listen(), then you accept()
    if (listen(server_fd, 3) < 0) // 3 is the maximum size of queue - connections you haven't accepted
    {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    // returns a brand new socket file descriptor to use for this single accepted connection. Once done, use send and recv
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
                       (socklen_t*)&addrlen))<0)
    {
        perror("accept");
        exit(EXIT_FAILURE);
    }
    printf("Connection Established\n");
    //valread = read( new_socket , buffer, 1024);  // read infromation received into the buffer
    //printf("%s\n",buffer );
    //send(new_socket , hello , strlen(hello) , 0 );  // use sendto() and recvfrom() for DGRAM
    //printf("Hello message sent\n");
    while(1){
        valread = read( new_socket , buffer, 1024);  // read infromation received into the buffer
        if(strcmp(buffer,"listall\n")==0){
            fileslist = give_me_files_list();
            send(new_socket , fileslist , strlen(fileslist) , 0 );
        }
        else if(strncmp(buffer,"send",4)==0){
            printf("Client is requesting downloads\n");
            char* send_filename;
            send_filename = splitcommands(buffer);
            if(strcmp(send_filename,"Multiple Files Requests not entertained.\n")==0){
                printf("Multiple Files Requested, sending error Message\n");
            }else{
                FILE *fp;
                int words = 0;
                char c;
                fp = fopen(send_filename,"r");
                while(c = getc(fp)!=EOF){
                    fscanf(fp, "%s", buffer);
                    if(c == ' ' || c == '\t') words++;
                }
                rewind(fp);
                printf("Number of words in File: %d\n",words);

            }
            send(new_socket , send_filename , strlen(send_filename) , 0 );
        }
    }
    return 0;
}
